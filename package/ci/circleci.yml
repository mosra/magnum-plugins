version: 2.1

orbs:
  codecov: codecov/codecov@1.1.1

executors:
  ubuntu-18_04:
    docker:
    - image: ubuntu:bionic-20220427
  xcode-10_3:
    macos:
      xcode: 10.3.0
  xcode-11_5:
    macos:
      # xcbeautify (for the iOS build) requires Xcode 11.4. Since 2922-05-23,
      # 11.4.1 images wait endlessly for "VM assignment", using 11.5 instead.
      xcode: 11.5
  emscripten:
    docker:
    # 1.39.0 is the oldest on Docker. Anything before 1.39.2 is useless as emar
    # randomly asserts: https://github.com/emscripten-core/emscripten/pull/9742
    # Then, anything before 1.39.6 is useless as well because emar has a
    # filesystem race and randomly complains that a file doesn't exist:
    # https://github.com/mosra/magnum/issues/413,
    # https://github.com/emscripten-core/emscripten/pull/10161
    - image: emscripten/emsdk:1.39.6-upstream
  android-29:
    machine:
      image: android:202102-01
  arm64:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium

commands:
  install-base-linux:
    parameters:
      extra:
        type: string
        default: ""
    steps:
    - run:
        name: Update apt and install base packages
        # Git is needed always for cloning Corrade and Magnum
        command: |
          apt update
          if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then export LCOV_PACKAGES="lcov curl"; fi
          # libidn11 needed by CMake
          apt install -y git ninja-build libidn11 $LCOV_PACKAGES << parameters.extra >>

  install-base-linux-arm64:
    parameters:
      extra:
        type: string
        default: ""
    steps:
    - run:
        name: Update apt and install base packages
        # Compared to Docker images this needs sudo
        command: |
          sudo apt update
          if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then export LCOV_PACKAGES="lcov curl"; fi
          sudo apt install -y ninja-build gcc cmake $LCOV_PACKAGES << parameters.extra >>

  cap-ninja-jobs:
    parameters:
      count:
        type: integer
        # It reports 36 cores and ninja goes with 38 currently, RAM fluctuates
        # from 3 to 70 GB.
        default: 24
    steps:
    - run:
        name: Query CPU cores, default Ninja parallelism and available RAM, cap jobs
        command: |
          nproc
          ninja --help 2>&1 | grep "N jobs in parallel" || true
          free
          echo "export NINJA_JOBS=-j<< parameters.count >>" >> $BASH_ENV

  # ninja needs python@3.9 as a dependency FOR SOME FUCKING REASON and when THE
  # DAMN THING installs it, it proceeds with reinstalling python@2. FROM
  # SOURCES! FUCK! and then it fails to link it because NO SHIT, python@3.9 is
  # already installed! HOW THE FUCK ARE PEOPLE ABLE TO DEAL WITH SUCH CURSED
  # SHIT ALL THE TIME?! FUCK OFF
  #
  # TODO: Needed only on 10.3 and 11.4, not on 11.5 anymore, remove once those
  #   images are not used anymore.
  macos-remove-python-curse:
    steps:
    - run:
        name: Remove Python 2 curse
        command: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew uninstall python@2

  install-base-macos:
    parameters:
      extra:
        type: string
        default: ""
    steps:
    - run:
        name: Install base packages
        # As usual, homebrew takes five minutes to update and then explodes in
        # a spectacular way. How is this acceptable?!
        command: |
          if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then export LCOV_PACKAGES="lcov"; fi
          HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake ninja $LCOV_PACKAGES << parameters.extra >>

  install-base-android:
    steps:
    - run:
        name: Create Android 29 x86 AVD
        command: |
          SYSTEM_IMAGES="system-images;android-29;default;x86"
          sdkmanager "$SYSTEM_IMAGES"
          echo "no" | avdmanager --verbose create avd -n test -k "$SYSTEM_IMAGES"
    - run:
        name: Launch Android emulator
        command: |
          emulator -avd test -delay-adb -verbose -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
        background: true
    - run:
        name: Update apt and install base packages
        # Compared to Docker images this needs sudo, for some reason
        command: |
          sudo apt update
          sudo apt install -y ninja-build

  install-gcc-4_8:
    steps:
    - run:
        name: Install GCC 4.8
        # For some reason, CMake needs a working C compiler, so provice CC as
        # well for the case when default gcc isn't installed.
        command: |
          apt install -y g++-4.8
          echo 'export CC=gcc-4.8' >> $BASH_ENV
          echo 'export CXX=g++-4.8' >> $BASH_ENV

  # While we want to make sure the project builds on GCC 4.8 as certain
  # embedded toolchains still use it, for Clang we just pick the version
  # available in the oldest supported distro.
  install-clang:
    steps:
    - run:
        # For some reason, CMake needs a working C compiler, so provice CC as
        # well for the case when default gcc isn't installed.
        #
        # The llvm-symbolizer link needs to be set in order to have usable
        # symbols in the output. This affects suppressions as well, meaning
        # they won't work if the symbols are not resolvable. It's not enough to
        # just `export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-6.0`
        # because it then complains that
        #
        #   External symbolizer path is set to '/usr/bin/llvm-symbolizer-6.0'
        #   which isn't a known symbolizer. Please set the path to the
        #   llvm-symbolizer binary or other known tool.
        #
        # Probably because because it detects tool type based on the filename?
        # Ugh.
        name: Install Clang
        command: |
          apt install -y clang
          echo 'export CC=clang' >> $BASH_ENV
          echo 'export CXX=clang++' >> $BASH_ENV
          ls -l /usr/bin/llvm-symbolizer-6.0
          ln -s /usr/bin/llvm-symbolizer{-6.0,}

  install-cmake:
    parameters:
      version:
        type: string
      sudo:
        type: string
        default: ""
    steps:
    - run:
        name: Install CMake << parameters.version >>
        command: |
          version_short=<< parameters.version >>
          version_short="${version_short%.*}"
          << parameters.sudo >> apt install -y wget
          mkdir -p $HOME/cmake && cd $HOME/cmake
          wget -nc --no-check-certificate https://cmake.org/files/v$version_short/cmake-<< parameters.version >>-Linux-x86_64.tar.gz
          tar --strip-components=1 -xzf cmake-<< parameters.version >>-Linux-x86_64.tar.gz
          echo 'export PATH=$HOME/cmake/bin:$PATH' >> $BASH_ENV
          source $BASH_ENV
          cmake --version | grep << parameters.version >>
          ctest --version | grep << parameters.version >>

  install-meshoptimizer:
    steps:
    - run:
        name: Install meshoptimizer
        # few commits after 0.14 with a fix for old Apple Clang
        command: |
          export MESHOPTIMIZER_VERSION=97c52415c6d29f297a76482ddde22f739292446d
          mkdir -p $HOME/meshoptimizer && cd $HOME/meshoptimizer
          wget -nc --no-check-certificate https://github.com/zeux/meshoptimizer/archive/$MESHOPTIMIZER_VERSION.tar.gz
          tar --strip-components=1 -xzf $MESHOPTIMIZER_VERSION.tar.gz
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_INSTALL_PREFIX=$HOME/deps \
            -G Ninja
          ninja install

  install-basis:
    steps:
    - run:
        name: Install Basis Universal
        command: |
          export BASIS_VERSION=v1_15_update2
          mkdir -p $HOME/basis_universal && cd $HOME/basis_universal
          wget -nc https://github.com/BinomialLLC/basis_universal/archive/$BASIS_VERSION.tar.gz
          tar --strip-components 1 -xzf $BASIS_VERSION.tar.gz

  install-openexr:
    parameters:
      build:
        type: string
    steps:
    - run:
        name: Install OpenEXR
        # Zip from https://github.com/mosra/magnum-ci/tree/openexr and
        # self-hosted because GH Actions would make it too simple for people if
        # you could just download the artifacts directly, right? RIGHT?
        command: |
          apt install -y wget unzip
          mkdir -p $HOME/deps && cd $HOME/deps
          wget https://ci.magnum.graphics/openexr-2.5.5-<< parameters.build >>.zip
          unzip openexr-2.5.5-<< parameters.build >>.zip

  install-glslang:
    parameters:
      build:
        type: string
    steps:
    - run:
        name: Install glslang
        # Zip from https://github.com/mosra/magnum-ci/tree/glslang and
        # self-hosted because GH Actions would make it too simple for people if
        # you could just download the artifacts directly, right? RIGHT?
        command: |
          apt install -y wget unzip
          mkdir -p $HOME/deps && cd $HOME/deps
          wget https://ci.magnum.graphics/glslang-8.13.3743-<< parameters.build >>.zip
          unzip glslang-8.13.3743-<< parameters.build >>.zip

  install-spirv-tools:
    parameters:
      build:
        type: string
    steps:
    - run:
        name: Install SPIRV-Tools
        # Zip from https://github.com/mosra/magnum-ci/tree/spirv-tools and
        # self-hosted because GH Actions would make it too simple for people if
        # you could just download the artifacts directly, right? RIGHT?
        command: |
          apt install -y wget unzip
          mkdir -p $HOME/deps && cd $HOME/deps
          wget https://ci.magnum.graphics/spirv-tools-2020.4-<< parameters.build >>.zip
          unzip spirv-tools-2020.4-<< parameters.build >>.zip

  build:
    parameters:
      script:
        type: string
    steps:
    - checkout
    - run:
        name: Build & test
        command: |
          if [ "$BUILD_STATIC" != "ON" ]; then export BUILD_STATIC=OFF; fi
          if [ "$BUILD_DEPRECATED" != "OFF" ]; then export BUILD_DEPRECATED=ON; fi
          ./package/ci/<< parameters.script >>

  lcov:
    steps:
    - run:
        name: Collect code coverage
        # Keep in sync with PKBUILD-coverage and appveyor-lcov.sh, please
        command: |
          lcov $LCOV_EXTRA_OPTS --directory . --capture --output-file coverage.info > /dev/null
          lcov $LCOV_EXTRA_OPTS --extract coverage.info "*/src/Magnum*/*" --output-file coverage.info > /dev/null
          lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/MagnumExternal/*" --output-file coverage.info > /dev/null
          lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/Test/*" --output-file coverage.info > /dev/null
          lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/build/src/*" --output-file coverage.info > /dev/null
    - codecov/upload:
        file: coverage.info

jobs:
  linux:
    executor: ubuntu-18_04
    environment:
      CMAKE_CXX_FLAGS: --coverage
      LCOV_EXTRA_OPTS: --gcov-tool /usr/bin/gcov-4.8
      CONFIGURATION: Debug
    steps:
    - install-base-linux:
        extra: libfaad-dev libfreetype6-dev libjpeg-dev libopenal-dev libpng-dev libdevil-dev libharfbuzz-dev libassimp-dev libwebp-dev libzstd-dev wget
    # Crashes or gets stuck with the default setting, only on GCC
    - cap-ninja-jobs
    - install-gcc-4_8
    - install-cmake:
        version: "3.4.3"
    - install-basis
    - install-meshoptimizer
    # In repos only since 20.04, but even then would probably hit the GCC 4.8 /
    # 5 ABI break in std::string, so keeping our own build
    - install-glslang:
        build: ubuntu-16.04-gcc4.8
    - install-spirv-tools:
        build: ubuntu-16.04-gcc4.8
    # Can't use libopenexr-dev because of GCC 4.8 / 5 ABI break in std::string
    - install-openexr:
        build: ubuntu-16.04-gcc4.8
    - build:
        script: unix-desktop.sh
    - lcov

  linux-arm64:
    executor: arm64
    environment:
      CMAKE_CXX_FLAGS: --coverage
      CONFIGURATION: Debug
    steps:
    # Not installing the old GCC 4.8, CMake 3.4 and other ancient stuff to
    # speed up. These are tested more than enough on other jobs, plus here we
    # have a fresher Ubuntu so we can take them directly from the repos.
    - install-base-linux-arm64:
        extra: libfaad-dev libfreetype6-dev libjpeg-dev libopenal-dev libpng-dev libdevil-dev libharfbuzz-dev libassimp-dev libzstd-dev glslang-dev libopenexr-dev libwebp-dev spirv-tools
    - install-basis
    - install-meshoptimizer
    - build:
        script: unix-desktop.sh
    - lcov

  linux-static:
    executor: ubuntu-18_04
    environment:
      # STUPID yml interprets unquoted ON as a boolean
      BUILD_STATIC: "ON"
      CMAKE_CXX_FLAGS: --coverage
      LCOV_EXTRA_OPTS: --gcov-tool /usr/bin/gcov-4.8
      CONFIGURATION: Debug
    steps:
    - install-base-linux:
        extra: libfaad-dev libfreetype6-dev libjpeg-dev libopenal-dev libpng-dev libdevil-dev libharfbuzz-dev libassimp-dev libwebp-dev libzstd-dev wget
    # Crashes or gets stuck with the default setting, only on GCC
    - cap-ninja-jobs
    - install-gcc-4_8
    - install-cmake:
        version: "3.4.3"
    - install-basis
    - install-meshoptimizer
    # These two are in repos only since 20.04, but even then would probably hit
    # the GCC 4.8 / 5 ABI break in std::string, so keeping our own builds
    - install-glslang:
        build: ubuntu-16.04-gcc4.8
    - install-spirv-tools:
        build: ubuntu-16.04-gcc4.8
    # Can't use libopenexr-dev because of GCC 4.8 / 5 ABI break in std::string
    - install-openexr:
        build: ubuntu-16.04-gcc4.8
    - build:
        script: unix-desktop.sh
    - lcov

  linux-nondeprecated:
    executor: ubuntu-18_04
    environment:
      # STUPID yml interprets unquoted OFF as a boolean
      BUILD_DEPRECATED: "OFF"
      CMAKE_CXX_FLAGS: -DCORRADE_NO_ASSERT
      CONFIGURATION: Release
    steps:
    - install-base-linux:
        extra: libfaad-dev libfreetype6-dev libjpeg-dev libopenal-dev libpng-dev libdevil-dev libharfbuzz-dev libassimp-dev libwebp-dev libzstd-dev wget
    # Crashes or gets stuck with the default setting, only on GCC
    - cap-ninja-jobs
    - install-gcc-4_8
    - install-cmake:
        version: "3.4.3"
    - install-basis
    - install-meshoptimizer
    # These two are in repos only since 20.04, but even then would probably hit
    # the GCC 4.8 / 5 ABI break in std::string, so keeping our own builds
    - install-glslang:
        build: ubuntu-16.04-gcc4.8
    - install-spirv-tools:
        build: ubuntu-16.04-gcc4.8
    # Can't use libopenexr-dev because of GCC 4.8 / 5 ABI break in std::string
    - install-openexr:
        build: ubuntu-16.04-gcc4.8
    - build:
        script: unix-desktop.sh

  linux-sanitizers:
    executor: ubuntu-18_04
    environment:
      # STUPID yml interprets unquoted OFF as a boolean. Applications don't
      # have any automated tests, so building them for sanitizers doesn't make
      # sense.
      BUILD_APPLICATIONS: "OFF"
      CMAKE_CXX_FLAGS: -fsanitize=address
      CONFIGURATION: Debug
    steps:
    - install-base-linux:
        extra: libfaad-dev libfreetype6-dev libjpeg-dev libopenal-dev libpng-dev libdevil-dev libharfbuzz-dev libassimp-dev libwebp-dev libzstd-dev wget
    - install-clang
    - install-cmake:
        version: "3.4.3"
    - install-basis
    - install-meshoptimizer
    # These two are in repos only since 20.04
    - install-glslang:
        build: ubuntu-16.04-gcc5
    - install-spirv-tools:
        build: ubuntu-16.04-gcc5
    # Even though Clang 3.8 is able to work with libopenexr-dev, the version
    # 2.2 present in the 18.04 repos leaks like crazy, which is in direct
    # conflict to what this job is trying to test for. The only job that
    # actually runs against libopenexr-dev (and thus verifies compatibility
    # with 2.2) is the ThreadSanitizer build below.
    - install-openexr:
        build: ubuntu-16.04-gcc5
    - build:
        script: unix-desktop.sh

  linux-threadsanitizer:
    executor: ubuntu-18_04
    environment:
      # STUPID yml interprets unquoted OFF as a boolean. Applications don't
      # have any automated tests, so building them for sanitizers doesn't make
      # sense.
      BUILD_APPLICATIONS: "OFF"
      CMAKE_CXX_FLAGS: -fsanitize=thread
      CONFIGURATION: Debug
    steps:
    - install-base-linux:
        extra: libfaad-dev libfreetype6-dev libjpeg-dev libopenal-dev libpng-dev libdevil-dev libharfbuzz-dev libassimp-dev libopenexr-dev libwebp-dev libzstd-dev wget
    - install-clang
    - install-cmake:
        version: "3.4.3"
    - install-basis
    - install-meshoptimizer
    # These two are in repos only since 20.04
    - install-glslang:
        build: ubuntu-16.04-gcc5
    - install-spirv-tools:
        build: ubuntu-16.04-gcc5
    - build:
        script: unix-desktop.sh

  macos:
    # Using 9.4 would be great to ensure compatibility, however spirv-tools
    # isn't on the stale Homebrew on any earlier image than 10.3.
    executor: xcode-10_3
    environment:
      CMAKE_CXX_FLAGS: --coverage
      CONFIGURATION: Debug
    steps:
    - macos-remove-python-curse
    - install-base-macos:
        extra: faad2 harfbuzz assimp devil spirv-tools glslang openexr webp wget zstd
    - install-basis
    - install-meshoptimizer
    - build:
        script: unix-desktop.sh
    - lcov

  macos-static:
    # Using 9.4 would be great to ensure compatibility, however spirv-tools
    # isn't on the stale Homebrew on any earlier image than 10.3.
    executor: xcode-10_3
    environment:
      # STUPID yml interprets unquoted ON as a boolean
      BUILD_STATIC: "ON"
      CMAKE_CXX_FLAGS: --coverage
      CONFIGURATION: Debug
    steps:
    - macos-remove-python-curse
    - install-base-macos:
        extra: faad2 harfbuzz assimp devil spirv-tools glslang openexr webp wget zstd
    - install-basis
    - install-meshoptimizer
    - build:
        script: unix-desktop.sh
    - lcov

  emscripten:
    executor: emscripten
    steps:
    - install-base-linux
    # Zstd built inside emscripten.sh
    - install-basis
    - build:
        script: emscripten.sh

  android-x86:
    executor: android-29
    steps:
    - install-base-android
    # We need ctest --timeout for flaky adb push, which is since 3.17. The
    # image had 3.16.3 by default, so it's just a small jump.
    - install-cmake:
        version: "3.17.5"
        sudo: sudo
    # Zstd built inside android-x86.sh
    - install-basis
    - build:
        script: android-x86.sh

  ios:
    executor: xcode-11_5
    steps:
    - install-base-macos:
        extra: xcbeautify wget
    # Zstd built inside ios-simulator.sh
    - install-basis
    - build:
        script: ios-simulator.sh

workflows:
  version: 2
  build:
    jobs:
    - linux
    - linux-arm64
    - linux-static
    - linux-nondeprecated
    - linux-sanitizers
    - linux-threadsanitizer
    - macos
    - macos-static
    - emscripten
    - android-x86
    - ios
