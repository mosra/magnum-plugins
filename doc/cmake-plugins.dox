/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page cmake-plugins Plugin usage with CMake
@brief Guide how to find and use static Magnum plugins with CMake build system

@tableofcontents
@m_footernavigation

If you are going to use dynamic plugins (the default) via plugin manager, they
don't need to be handled via CMake. The manager will look for them at runtime
at specified location and loads them dynamically. However, if they are built as
static (see @ref building-plugins for more information), they need to be linked
into the executable and then explicitly imported. Also if you are going to use
them as dependencies, you need to find the dependency and then link to it.

The logic is in module `FindMagnumPlugins.cmake` distributed in plugin
repository in `modules/` directory, you are encouraged to copy it into your
project and add path to the files to `CMAKE_MODULE_PATH`. Otherwise, if CMake
won't be able to find this file in predefined locations, it will error out even
if Magnum plugins might be installed on the system. Note that the module file
is updated as the library evolves, you are encouraged to update your copy from
time to time to avoid strange building issues.

If you installed the library or its dependencies to non-standard location
(other than `/usr`, e.g. `/home/xyz/projects`), set `CMAKE_PREFIX_PATH` to that
directory to help CMake find it. You can enter more different dirs if you
separate them with semicolons.

Basic usage is:

@code{.cmake}
find_package(MagnumPlugins REQUIRED)
@endcode

This command tries to find Magnum plugins and then defines:

-   `MagnumPlugins_FOUND` --- Whether Magnum plugins were found

This command will not try to find any actual plugin. The plugins are:

-   `AssimpImporter` --- @ref Trade::AssimpImporter "AssimpImporter" plugin
-   `DdsImporter` --- @ref Trade::DdsImporter "DdsImporter" plugin
-   `DevIlImageImporter` --- @ref Trade::DevIlImageImporter "DevIlImageImporter"
    plugin
-   `DrFlacAudioImporter` --- @ref Audio::DrFlacImporter "DrFlacAudioImporter"
    plugin
-   `DrMp3AudioImporter` --- @ref Audio::DrMp3Importer "DrMp3AudioImporter"
    plugin
-   `DrWavAudioImporter` --- @ref Audio::DrWavImporter "DrWavAudioImporter"
    plugin
-   `Faad2AudioImporter` --- @ref Audio::Faad2Importer "Faad2AudioImporter"
    plugin
-   `FreeTypeFont` --- @ref Text::FreeTypeFont "FreeTypeFont" plugin
-   `HarfBuzzFont` --- @ref Text::HarfBuzzFont "HarfBuzzFont" plugin
-   `JpegImageConverter` --- @ref Trade::JpegImageConverter "JpegImageConverter"
    plugin
-   `JpegImporter` --- @ref Trade::JpegImporter "JpegImporter" plugin
-   `MiniExrImageConverter` --- @ref Trade::MiniExrImageConverter "MiniExrImageConverter"
    plugin
-   `OpenGexImporter` --- @ref Trade::OpenGexImporter "OpenGexImporter" plugin
-   `PngImageConverter` --- @ref Trade::PngImageConverter "PngImageConverter"
    plugin
-   `PngImporter` --- @ref Trade::PngImporter "PngImporter" plugin
-   `StanfordImporter` --- @ref Trade::StanfordImporter "StanfordImporter"
    plugin
-   `StbImageConverter` --- @ref Trade::StbImageConverter "StbImageConverter"
    plugin
-   `StbImageImporter` --- @ref Trade::StbImageImporter "StbImageImporter"
    plugin
-   `StbTrueTypeFont` --- @ref Text::StbTrueTypeFont "StbTrueTypeFont" plugin
-   `StbVorbisAudioImporter` --- @ref Audio::StbVorbisImporter "StbVorbisAudioImporter"
    plugin
-   `TinyGltfImporter` --- @ref Trade::TinyGltfImporter "TinyGltfImporter"
    plugin

Some plugins expose their internal state through separate libraries. The
libraries are:

-   `OpenDdl` --- @ref OpenDdl library

Note that each plugin class / library namespace contains more detailed
information about dependencies, availability on particular platform and also
guide how to enable given library in build and use it with CMake.

Example usage with specifying the plugins is:

@code{.cmake}
find_package(MagnumPlugins REQUIRED FreeTypeFont PngImporter)
@endcode

For each plugin is then defined:

-   `MagnumPlugins_*_FOUND` --- Whether the plugin was found
-   `MagnumPlugins::*` --- Plugin imported target

The package is found if either debug or release version of each requested
plugin is found. If both debug and release plugins are found, proper version is
chosen based on actual build configuration of the project (i.e. `Debug` build
is linked to debug plugins, `Release` build to release plugins). See @ref cmake
for more information about autodetection of `MAGNUM_PLUGINS_DIR`.

See also @ref cmake "Magnum usage with CMake" for more information.

@section cmake-plugins-modules Other CMake modules

The `modules/` directory contains more useful CMake modules:

-   `FindAssimp.cmake` --- CMake module for finding Assimp. Copy this to your
    module directory if you want to find and link to @ref Trade::AssimpImporter.
-   `FindDevIL.cmake` --- CMake module for finding DevIL. This is a forked
    version of the upstream module that doesn't attempt to find the often not
    distributed ILUT library. Copy this to your module directory if you want to
    find and link to @ref Trade::DevIlImageImporter.
-   `FindFAAD2.cmake` --- CMake module for finding FAAD2. Copy this to your
    module directory if you want to find and link to @ref Audio::Faad2Importer.
-   `FindHarfBuzz.cmake` --- CMake module for finding HarfBuzz. Copy this to
    your module directory if you want to find and link to
    @ref Text::HarfBuzzFont.

See also @ref cmake-modules "relevant section for the main Magnum project".
*/
}
