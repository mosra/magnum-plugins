# [configuration_]
[configuration]
# Vertex cache optimization, operates on the index buffer only
optimizeVertexCache=true

# Overdraw optimization, operates on the index buffer and additionally
# requires the mesh to provide (read-only) per-vertex positions
optimizeOverdraw=true
optimizeOverdrawThreshold=1.05

# Vertex fetch optimization, operates on both index and vertex buffer
optimizeVertexFetch=true

# Mesh simplification, disabled by default as it's a destructive operation.
# The simplifySloppy option is a variant without preserving original mesh
# topology, enable either one or the other.
simplify=false
simplifySloppy=false
simplifyTargetIndexCountThreshold=1.0
simplifyTargetError=1.0e-2
# Do not move vertices that are located on the topological border (vertices
# on triangle edges that don't have a paired triangle). Useful for
# simplifying portions of a larger mesh. Available since meshoptimizer 0.18,
# ignored on older versions.
simplifyLockBorder=false
# Improve simplification performance assuming input indices are a sparse
# subset of the mesh. Note that error becomes relative to subset extents.
# Available since meshoptimizer 0.21, ignored on older versions.
simplifySparse=false
# Treat error limit and resulting error as absolute instead of relative to
# mesh extents. Available since meshoptimizer 0.21, ignored on older
# versions.
simplifyErrorAbsolute=false
# Remove disconnected parts of the mesh during simplification incrementally,
# regardless of the topological restrictions inside components. Available
# since meshoptimizer 0.22, ignored on older versions.
simplifyPrune=false
# Produce more regular triangle sizes and shapes during simplification, at
# some cost to geometric quality. Experimental. Available since meshoptimizer
# 0.25, ignored on older versions.
simplifyRegularize=false
# Allow collapses across attribute discontinuities. Experimental. Available
# since meshoptimizer 0.25, ignored on older versions.
simplifyPermissive=false
# Fail the process if the simplification results in an empty mesh. Useful to
# ensure the target error isn't set too high. By default a zero-vertex mesh
# gets returned in that case. Has no effect for input meshes that are already
# empty, those are passed through always.
simplifyFailEmpty=false

# Used by mesh efficiency analyzers when verbose output is enabled. Defaults
# the same as in the meshoptimizer demo app.
analyzeCacheSize=16
analyzeWarpSize=0
analyzePrimitiveGroupSize=0
# [configuration_]
