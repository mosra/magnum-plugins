diff --git a/testbidirectionalmapping.c b/testbidirectionalmapping.c
index 480d103..8ab065b 100644
--- a/testbidirectionalmapping.c
+++ b/testbidirectionalmapping.c
@@ -568,6 +568,14 @@ uint32_t *getmap(enum VkFormat f)
     }
 }
 
+void appendmap(uint32_t format, FILE* file, uint32_t* dfd)
+{
+    // assumes little-endian system
+    uint32_t dfdsize = dfd[0];
+    fwrite(&format, sizeof(format), 1, file);
+    fwrite(dfd, dfdsize, 1, file);
+}
+
 enum VkFormat unmap(uint32_t *dfd)
 {
 #include "dfd2vk.inl"
@@ -575,12 +583,15 @@ enum VkFormat unmap(uint32_t *dfd)
 
 int main()
 {
+    FILE *file = fopen("dfd-data.bin", "wb");
+
     unsigned int i;
     for (i = 1; i <= 184; ++i) {
         uint32_t *dfd = getmap((enum VkFormat)i);
         VkFormat f = unmap(dfd);
         if (i != f) printf("Input and output enums differ: %s (%d) -> %s (%d)\n",
                            formatname(i),i, formatname(f),f);
+        else appendmap(i, file, dfd);
         free((void *)dfd);
     }
 
@@ -591,6 +602,7 @@ int main()
         VkFormat f = unmap(dfd);
         if (i != f) printf("Input and output enums differ: %s (%d) -> %s (%d)\n",
                            formatname(i),i, formatname(f),f);
+        else appendmap(i, file, dfd);
         free((void *)dfd);
     }
 
@@ -600,6 +612,7 @@ int main()
         VkFormat f = unmap(dfd);
         if (i != f) printf("Input and output enums differ: %s (%d) -> %s (%d)\n",
                            formatname(i),i, formatname(f),f);
+        else appendmap(i, file, dfd);
         free((void *)dfd);
     }
 
@@ -609,7 +622,10 @@ int main()
         VkFormat f = unmap(dfd);
         if (i != f) printf("Input and output enums differ: %s (%d) -> %s (%d)\n",
                            formatname(i),i, formatname(f),f);
+        else appendmap(i, file, dfd);
         free((void *)dfd);
     }
+
+    fclose(file);
     return 0;
 }
